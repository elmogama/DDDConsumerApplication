@page "/customer/shopping-cart"
@using ConsumerApplication.Data
@using ConsumerApplication.Data.Data
@using System.Linq
@using ConsumerApplication.Models
       
@rendermode InteractiveServer

@if (shoppingCartItems == null)
{
    <div style="text-align: center; width: 100%">
        <h2>No Items In Your Cart!</h2>
    </div>
}
else
{
<h1>Shopping Cart</h1>
<div class="shopping-cart">
  
  <h3>Payment Method:</h3>
  @if (creditCards!=null && creditCards.Count > 0)
  {
    <select id="warehouses" @onchange="(ui) => SetOrderCreditCardNumber(creditCards.Find(x=>x.CreditCardNum == (string)ui.Value))">
      @foreach (CreditCard creditCard in creditCards)
      {
        <option value="@creditCard.CreditCardNum">@creditCard.CreditCardNum</option>
      }
    </select>
  }
  
  @foreach (Models.ShoppingCart shoppingCartItem in shoppingCartItems)
  {
    <div class="product">
      <div class="product-image">
        <img src="@shoppingCartItem.ImageLink">
      </div>
      <div class="product-details">
        <div class="product-title">@shoppingCartItem.ProductName</div>
      </div>
      <div class="product-price">@shoppingCartItem.Price</div>
      <div class="product-quantity">
        <input id="quantity-input" type="number" value="@shoppingCartItem.Quantity" min="1" @oninput="(ui) => ChangeQuantity(shoppingCartItem.ProductId, (string)ui.Value)">
      </div>
      <div class="product-removal">
        <button class="remove-product" @onclick="() => RemoveItem(shoppingCartItem.ProductId)">
          Remove
        </button>
      </div>
      <div class="product-line-price">@shoppingCartItem.TotalPrice</div>
    </div>
  }
  <div class="totals">
    <div class="totals-item">
      <label>Subtotal: </label>
      <div class="totals-value" id="cart-subtotal">@shoppingCartItems.Sum(item => item.TotalPrice)</div>
    </div>
    <div class="totals-item">
      <label>Delivery Price: </label>
      <div class="totals-value" id="cart-subtotal">@order.DeliveryPrice</div>
    </div>
    <div class="totals-item">
      <label>Total Price: </label>
      <div class="totals-value" id="cart-subtotal">@Sum(@order.DeliveryPrice, @shoppingCartItems.Sum(item => item.TotalPrice))
        @{
          object Sum(decimal orderDeliveryPrice, decimal orderSum)
          {
            return orderDeliveryPrice + orderSum;
          }
        }
      </div>
    </div>
  </div>
  <label for="delivery-type">Delivery Type: </label>
  <select name="delivery-type" @oninput="(ui) => ChangeDeliveryType((string)ui.Value)">
    <option>@order.DeliveryType</option>
    <option value="Standard">Standard</option>
    <option value="Express">Express</option>
  </select>
  <button class="checkout" @onclick="Checkout">Checkout</button>
</div>
}

@inject DatabaseContext _db
@inject ICookie _cookie

@code {
    List<Models.ShoppingCart> shoppingCartItems;
    Models.Order order;
    List<CreditCard> creditCards;

    protected override async void OnInitialized()
    {
        string customerid = await _cookie.GetValue("customerid");
        ShoppingCartData scd = new ShoppingCartData(_db);
        CreditCardData ccd = new CreditCardData(_db);
        shoppingCartItems = scd.GetShoppingCartItems(customerid);
        creditCards = ccd.GetCreditCardList(customerid);
        order = scd.GetOrder(customerid);
        
        StateHasChanged();
    }

    public async void RemoveItem(int productid)
    {
      ShoppingCartData scd = new ShoppingCartData(_db);
      string customerid = await _cookie.GetValue("customerid");
      scd.RemoveShoppingCartItem(productid, customerid);
      StateHasChanged();
    }

    public async void ChangeQuantity(int productid, string quantity)
    {
      ShoppingCartData scd = new ShoppingCartData(_db);
      string customerid = await _cookie.GetValue("customerid");
      scd.ChangeQuantity(productid, quantity, customerid);
    }
    
    public async void ChangeDeliveryType(string deliveryType)
    {
      ShoppingCartData scd = new ShoppingCartData(_db);
      string customerid = await _cookie.GetValue("customerid");
      if (deliveryType == "Express")
      {
        order.DeliveryPrice = 15;
      }
      else
      {
        order.DeliveryPrice = 10;
      }
      scd.ChangeDeliveryType(deliveryType, order.DeliveryPrice, customerid);
      StateHasChanged();
    }

    public async void Checkout()
    {
      ShoppingCartData scd = new ShoppingCartData(_db);
      string customerid = await _cookie.GetValue("customerid");
      scd.Checkout(customerid);
    }

    private void SetOrderCreditCardNumber(CreditCard creditCard)
    {
      order.CreditCardNum = creditCard.CreditCardNum;
    }

}